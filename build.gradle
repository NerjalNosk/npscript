plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
    id 'antlr'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_build}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation(include(antlr("org.antlr:antlr4:${project.antlr_version}")))
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand inputs.properties
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
    it.dependsOn generateGrammarSource
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

generateGrammarSource {
    maxHeapSize = "256m"
    arguments += ["-visitor", "-long-messages"]
    doFirst {
        println("Clearing remaining generated sources")
        File srcFile = sourceSets.named("main").get().antlr.srcDirs.first();
        FileTree srcTree = sourceSets.named("main").get().antlr.asFileTree;
        srcTree.matching { include "**/*.g4" }.each {
            def packPath = srcFile.relativePath(it.parentFile)
            def javaDir = new File(sourceSets.named("main").get().java.srcDirs.first(), packPath)
            def resDir = new File(sourceSets.named("main").get().resources.srcDirs.first(), packPath)
            if (javaDir.exists()) javaDir.listFiles().each { f->
                if (f.exists() && f.name != ".gitignore") f.directory ? f.deleteDir() : f.delete()
            }
            if (resDir.exists()) resDir.listFiles().each { f->
                if (f.exists() && f.name != ".gitignore") f.directory ? f.deleteDir() : f.delete()
            }
        }
    }
    doLast {
        println("Moving generated parser sources")
        File srcFile = sourceSets.named("main").get().antlr.srcDirs.first();
        FileTree srcTree = sourceSets.named("main").get().antlr.asFileTree;
        srcTree.matching { include "**/*.g4" }.each {
            def packPath = srcFile.relativePath(it.parentFile)
            def javaDir = new File(sourceSets.named("main").get().java.srcDirs.first(), packPath)
            def resDir = new File(sourceSets.named("main").get().resources.srcDirs.first(), packPath)
            def genDir = new File(outputDirectory, packPath)
            javaDir.mkdirs()
            resDir.mkdirs()
            genDir.listFiles().each {f ->
                def target = (f.name.endsWith(".java")) ? javaDir : resDir
                copy {
                    from f
                    into target
                }
            }
        }
        outputDirectory.deleteDir()
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

sourcesJar {
    dependsOn generateGrammarSource
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
    }
}
